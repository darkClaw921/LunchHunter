from aiogram import Router, F
from aiogram.types import CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database import Database
from app.keyboards import get_review_keyboard, get_back_to_place_keyboard

router = Router()

class ReviewState(StatesGroup):
    waiting_for_comment = State()

@router.callback_query(F.data.startswith("review:"))
async def callback_review(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ü–µ–Ω–∏—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏–µ'"""
    place_id = int(callback.data.split(":")[1])
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    text = (
        f"‚≠ê *–û—Ü–µ–Ω–∏—Ç–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {place['name']}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5 –∑–≤–µ–∑–¥:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_review_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("rate:"))
async def callback_rate(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ—Ü–µ–Ω–∫–∏"""
    parts = callback.data.split(":")
    place_id = int(parts[1])
    rating = int(parts[2])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(place_id=place_id, rating=rating)
    await state.set_state(ReviewState.waiting_for_comment)
    
    db = Database()
    place = await db.get_place_by_id(place_id)
    
    text = (
        f"‚≠ê *–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {rating} –∏–∑ 5 –¥–ª—è {place['name']}*\n\n"
        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞—à–µ–π –æ—Ü–µ–Ω–∫–µ.\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è."
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.message(StateFilter(ReviewState.waiting_for_comment))
async def process_review_comment(message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É"""
    comment = message.text.strip()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    place_id = data.get("place_id")
    rating = data.get("rating")
    
    db = Database()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.add_review(
        user_id=message.from_user.id,
        place_id=place_id,
        rating=rating,
        comment=comment
    )
    
    place = await db.get_place_by_id(place_id)
    
    text = (
        f"‚úÖ *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤ –æ {place['name']}!*\n\n"
        f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É: {'‚≠ê' * rating}"
    )
    
    if comment:
        text += f"\n\n–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}"
    
    await message.answer(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(StateFilter(ReviewState.waiting_for_comment), F.data.startswith("place:"))
async def save_review_without_comment(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    place_id = data.get("place_id")
    rating = data.get("rating")
    
    db = Database()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await db.add_review(
        user_id=callback.from_user.id,
        place_id=place_id,
        rating=rating
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ
    business_lunch = await db.get_business_lunch_by_place_id(place_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏ (–∫–∞–∫ –≤ callback_place_details)
    text = f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n\n"
    
    if business_lunch:
        text += f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á:*\n"
        text += f"üí∞ –¶–µ–Ω–∞: {business_lunch['price']} —Ä—É–±.\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {business_lunch['start_time']} - {business_lunch['end_time']}\n"
        
        if business_lunch['description']:
            text += f"üìù {business_lunch['description']}\n"
        
        text += "\n"
    
    if place['admin_comment']:
        text += f"‚ÑπÔ∏è *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n{place['admin_comment']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
    
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!", show_alert=True)
    
    from app.keyboards import get_place_details_keyboard
    
    await callback.message.edit_text(
        text,
        reply_markup=get_place_details_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear() 