from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database import Database
from app.keyboards import (
    get_search_results_keyboard, 
    get_start_keyboard, 
    get_full_place_details_keyboard,
    get_menu_search_pagination_keyboard,
    get_menu_categories_keyboard,
    get_menu_items_by_category_keyboard,
    get_back_to_place_keyboard
)
import math

router = Router()

class MenuSearch(StatesGroup):
    waiting_for_query = State()

@router.callback_query(F.data == "menu_search")
async def callback_menu_search(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é'"""
    await state.set_state(MenuSearch.waiting_for_query)
    
    text = (
        "üîç *–ü–æ–∏—Å–∫ –ø–æ –º–µ–Ω—é*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: *–∫–∞—Ä–±–æ–Ω–∞—Ä–∞*, *–ø–∏–≤–æ*, *–¥–µ—Å–µ—Ä—Ç* –∏ —Ç.–¥."
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()

@router.message(StateFilter(MenuSearch.waiting_for_query))
async def process_menu_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
    query = message.text.strip()
    
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(query=query)
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    db = Database()
    city = await db.get_user_city(user_id)
    
    if not city:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=get_start_keyboard()
        )
        await state.clear()
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    total = await db.count_search_results(query, city)
    
    if total == 0:
        await message.answer(
            f"–ü–æ –∑–∞–ø—Ä–æ—Å—É *{query}* –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
            reply_markup=get_start_keyboard(),
            parse_mode="Markdown"
        )
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    page = 1
    per_page = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = math.ceil(total / per_page)
    offset = (page - 1) * per_page
    
    places = await db.search_places_by_menu(query, city, limit=per_page, offset=offset)
    
    if not places:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_start_keyboard()
        )
        await state.clear()
        return
    
    place = places[0]
    place_id = place['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É
    menu_items = await db.get_menu_items_by_place_id(place_id)
    matching_items = [item for item in menu_items if query.lower() in item['name'].lower() or query.lower() in item['category'].lower()]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {query}\n\n"
    text += f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
    text += f"*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é:*\n"
    for item in matching_items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
        text += f"‚Ä¢ {item['name']} - {item['price']} —Ä—É–±. ({item['category']})\n"
    
    if len(matching_items) > 3:
        text += f"...–∏ –µ—â–µ {len(matching_items) - 3} –ø–æ–∑–∏—Ü–∏–π\n"
    
    text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n"
    
    await message.answer(
        text,
        reply_markup=get_menu_search_pagination_keyboard(
            places, page, total_pages, query, place_id
        ),
        parse_mode="Markdown"
    )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data.startswith("menu_search_page:"))
async def callback_menu_search_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –ø–æ –º–µ–Ω—é"""
    # –§–æ—Ä–º–∞—Ç: menu_search_page:query:page
    parts = callback.data.split(":")
    query = parts[1]
    page = int(parts[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    db = Database()
    city = await db.get_user_city(user_id)
    
    if not city:
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    total = await db.count_search_results(query, city)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    per_page = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = math.ceil(total / per_page)
    offset = (page - 1) * per_page
    
    places = await db.search_places_by_menu(query, city, limit=per_page, offset=offset)
    
    if not places:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    place = places[0]
    place_id = place['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—É
    menu_items = await db.get_menu_items_by_place_id(place_id)
    matching_items = [item for item in menu_items if query.lower() in item['name'].lower() or query.lower() in item['category'].lower()]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    text = f"üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:* {query}\n\n"
    text += f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é
    text += f"*–ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é:*\n"
    for item in matching_items[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–æ–∑–∏—Ü–∏–∏
        text += f"‚Ä¢ {item['name']} - {item['price']} —Ä—É–±. ({item['category']})\n"
    
    if len(matching_items) > 3:
        text += f"...–∏ –µ—â–µ {len(matching_items) - 3} –ø–æ–∑–∏—Ü–∏–π\n"
    
    text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_menu_search_pagination_keyboard(
            places, page, total_pages, query, place_id
        ),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("menu_all_items:"))
async def callback_menu_all_items(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
    # –§–æ—Ä–º–∞—Ç: menu_all_items:place_id:query
    parts = callback.data.split(":")
    place_id = int(parts[1])
    query = parts[2]
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    menu_items = await db.get_menu_items_by_place_id(place_id)
    matching_items = [item for item in menu_items if query.lower() in item['name'].lower() or query.lower() in item['category'].lower()]
    
    if not matching_items:
        await callback.answer("–ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö –º–µ–Ω—é
    text = f"üìã *–í—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –≤ {place['name']}:*\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    categories = {}
    for item in matching_items:
        category = item['category']
        if category not in categories:
            categories[category] = []
        categories[category].append(item)
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    for category, items in categories.items():
        text += f"*{category}:*\n"
        for item in items:
            desc = f"üóí {item['description']}" if item['description'] else ""
            text += f"‚Ä¢ *{item['name']}* \nüíµ{item['price']} —Ä—É–±.\n{desc}\n"
        text += "\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("menu_categories:"))
async def callback_menu_categories(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ–Ω—é –∑–∞–≤–µ–¥–µ–Ω–∏—è"""
    # –§–æ—Ä–º–∞—Ç: menu_categories:place_id
    parts = callback.data.split(":")
    place_id = int(parts[1])
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
    categories = await db.get_menu_categories_by_place_id(place_id)
    
    if not categories:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö –º–µ–Ω—é
    text = f"üîç *–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é –≤ {place['name']}:*\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é:"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_menu_categories_keyboard(place_id, categories),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("menu_category:"))
async def callback_menu_category(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∑–∏—Ü–∏–π –º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    # –§–æ—Ä–º–∞—Ç: menu_category:place_id:category
    parts = callback.data.split(":")
    place_id = int(parts[1])
    category = parts[2]
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    menu_items = await db.get_menu_items_by_category(place_id, category)
    
    if not menu_items:
        await callback.answer("–ü–æ–∑–∏—Ü–∏–∏ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–∑–∏—Ü–∏—è—Ö –º–µ–Ω—é
    text = f"üìã *{category} –≤ {place['name']}:*\n\n"
    
    for item in menu_items:
        desc = f"üóí {item['description']}" if item['description'] else ""
        text += f"‚Ä¢ *{item['name']}* \nüíµ{item['price']} —Ä—É–±.\n{desc}\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_menu_items_by_category_keyboard(place_id, category),
        parse_mode="Markdown"
    )
    
    await callback.answer() 