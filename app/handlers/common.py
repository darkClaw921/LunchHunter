from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.keyboards import get_start_keyboard, get_city_selection_keyboard
from app.database.database import Database

router = Router()
db = Database()

class UserStates(StatesGroup):
    waiting_for_city = State()

@router.message(Command("start", "help"))
async def cmd_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ /help"""
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    city = await db.get_user_city(user_id)
    
    if city:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        text = (
            f"üçΩÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LunchHunter!*\n\n"
            f"–í–∞—à –≥–æ—Ä–æ–¥: *{city}*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
        )
        await message.answer(text, reply_markup=get_start_keyboard(), parse_mode="Markdown")
    else:
        # –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å
        text = (
            "üçΩÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LunchHunter!*\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
        )
        await message.answer(text, reply_markup=get_city_selection_keyboard(), parse_mode="Markdown")
        await state.set_state(UserStates.waiting_for_city)

@router.callback_query(F.data.startswith("city:"))
async def callback_select_city(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞"""
    city = callback.data.split(":")[1]
    user_id = callback.from_user.id
    username = callback.from_user.username
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.add_user(user_id, username, city)
    
    text = (
        f"üçΩÔ∏è *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ LunchHunter!*\n\n"
        f"–í–∞—à –≥–æ—Ä–æ–¥: *{city}*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏ –∏ –¥—Ä—É–≥–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )
    await callback.message.edit_text(text, reply_markup=get_start_keyboard(), parse_mode="Markdown")
    await callback.answer(f"–ì–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}")
    await state.clear()

@router.callback_query(F.data == "change_city")
async def callback_change_city(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞"""
    text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:"
    await callback.message.edit_text(text, reply_markup=get_city_selection_keyboard())
    await callback.answer()
    await state.set_state(UserStates.waiting_for_city)

@router.callback_query(F.data == "start")
async def callback_start(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'"""
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    city = await db.get_user_city(user_id)
    
    text = (
        "üçΩÔ∏è *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n"
        f"–í–∞—à –≥–æ—Ä–æ–¥: *{city}*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:"
    )
    await callback.message.edit_text(text, reply_markup=get_start_keyboard(), parse_mode="Markdown")
    await callback.answer()

@router.callback_query(F.data == "pagination_info")
async def callback_pagination_info(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

@router.message()
async def unknown_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = (
        "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start "
        "–∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
    )
    await message.answer(text, reply_markup=get_start_keyboard()) 