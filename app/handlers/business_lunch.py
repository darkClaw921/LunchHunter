from aiogram import Router, F
from aiogram.types import CallbackQuery
from app.database import Database
from app.keyboards import (
    get_search_results_keyboard, 
    get_place_details_keyboard, 
    get_full_place_details_keyboard,
    get_back_to_place_keyboard,
    get_start_keyboard,
    get_weekday_selection_keyboard,
    get_all_lunches_keyboard
)
from app.utils import get_yandex_maps_url
from datetime import datetime
import math

router = Router()

@router.callback_query(F.data == "business_lunch")
async def callback_business_lunch(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏'"""
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    city = await db.get_user_city(user_id)
    
    if not city:
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    current_weekday = datetime.now().isoweekday()  # 1-7 (–ø–Ω-–≤—Å)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
    total = await db.count_business_lunches(city, weekday=current_weekday)
    
    if total == 0:
        await callback.message.edit_text(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏ –≤ –≥–æ—Ä–æ–¥–µ {city} –Ω–∞ {_get_weekday_name(current_weekday)} –ø–æ–∫–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    page = 1
    per_page = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = math.ceil(total / per_page)
    offset = (page - 1) * per_page
    
    places = await db.get_business_lunches(city, limit=per_page, offset=offset, weekday=current_weekday)
    
    if not places:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    place = places[0]
    place_id = place['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    text = f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á –Ω–∞ {_get_weekday_name(current_weekday)}*\n\n"
    text += f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n"
    text += f"üèôÔ∏è *–ì–æ—Ä–æ–¥:* {place['city']}\n\n"
    text += f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á:*\n"
    text += f"üí∞ –¶–µ–Ω–∞: {place['price']} —Ä—É–±.\n"
    text += f"‚è∞ –í—Ä–µ–º—è: {place['start_time']} - {place['end_time']}\n"
    
    if place['description']:
        text += f"üìù {place['description']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_full_place_details_keyboard(
            place_id, page, total_pages, "business_lunch_page"
        ),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("business_lunch_page:"))
async def callback_business_lunch_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ–π"""
    parts = callback.data.split(":")
    page = int(parts[1])
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π
    weekday = int(parts[2]) if len(parts) > 2 else None
    if weekday is None:
        weekday = datetime.now().isoweekday()
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = callback.from_user.id
    city = await db.get_user_city(user_id)
    
    if not city:
        await callback.message.edit_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–≤–µ–¥–µ–Ω–∏–π —Å –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞–º–∏
    total = await db.count_business_lunches(city, weekday=weekday)
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    per_page = 1  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ –æ–¥–Ω–æ–º—É –∑–∞–≤–µ–¥–µ–Ω–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    total_pages = math.ceil(total / per_page)
    offset = (page - 1) * per_page
    
    places = await db.get_business_lunches(city, limit=per_page, offset=offset, weekday=weekday)
    
    if not places:
        await callback.message.edit_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_start_keyboard()
        )
        await callback.answer()
        return
    
    place = places[0]
    place_id = place['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    text = f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á –Ω–∞ {_get_weekday_name(weekday)}*\n\n"
    text += f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n"
    text += f"üèôÔ∏è *–ì–æ—Ä–æ–¥:* {place['city']}\n\n"
    text += f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á:*\n"
    text += f"üí∞ –¶–µ–Ω–∞: {place['price']} —Ä—É–±.\n"
    text += f"‚è∞ –í—Ä–µ–º—è: {place['start_time']} - {place['end_time']}\n"
    
    if place['description']:
        text += f"üìù {place['description']}\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_full_place_details_keyboard(
            place_id, page, total_pages, "business_lunch_page", weekday
        ),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("select_day:"))
async def callback_select_day(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    parts = callback.data.split(":")
    place_id = int(parts[1])
    page = int(parts[2])
    
    await callback.message.edit_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:*",
        reply_markup=get_weekday_selection_keyboard(
            place_id, page, "business_lunch_day"
        ),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("business_lunch_day:"))
async def callback_business_lunch_day(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    parts = callback.data.split(":")
    page = int(parts[1])
    weekday = int(parts[2])
    
    await callback_business_lunch_page(callback)

@router.callback_query(F.data.startswith("place:"))
async def callback_place_details(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏"""
    parts = callback.data.split(":")
    place_id = int(parts[1])
    
    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π
    weekday = int(parts[2]) if len(parts) > 2 else None
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –¥–µ–Ω—å
    business_lunch = await db.get_business_lunch_by_place_id(place_id, weekday)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    text = f"*{place['name']}*\n"
    text += f"üìç *–ê–¥—Ä–µ—Å:* {place['address']}\n\n"
    
    if business_lunch:
        if weekday:
            text += f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á ({business_lunch['weekday_name']}):*\n"
        else:
            text += f"üçΩÔ∏è *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á (—Å–µ–≥–æ–¥–Ω—è):*\n"
            
        text += f"üí∞ –¶–µ–Ω–∞: {business_lunch['price']} —Ä—É–±.\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {business_lunch['start_time']} - {business_lunch['end_time']}\n"
        
        if business_lunch['description']:
            text += f"üìù {business_lunch['description']}\n"
        
        text += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∑—ã–≤–∞—Ö
    if reviews:
        avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
        text += f"‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
    else:
        text += "‚≠ê *–†–µ–π—Ç–∏–Ω–≥:* –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤\n\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_place_details_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data == "back_to_list")
async def callback_back_to_list(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    await callback_business_lunch(callback)

@router.callback_query(F.data.startswith("route:"))
async def callback_route(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç'"""
    place_id = int(callback.data.split(":")[1])
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã
    maps_url = get_yandex_maps_url(place['address'], place['name'])
    
    text = f"*{place['name']}*\n\n"
    text += f"–î–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{maps_url}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_place_details_keyboard(place_id, has_route=False),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("admin_comment:"))
async def callback_admin_comment(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'"""
    place_id = int(callback.data.split(":")[1])
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    if not place['admin_comment']:
        await callback.answer("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        return
    
    text = f"*{place['name']}*\n\n"
    text += f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n{place['admin_comment']}"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("all_reviews:"))
async def callback_all_reviews(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã'"""
    place_id = int(callback.data.split(":")[1])
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã
    reviews = await db.get_reviews_by_place_id(place_id)
    
    if not reviews:
        await callback.answer("–û—Ç–∑—ã–≤—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
        return
    
    text = f"*{place['name']}* - –û—Ç–∑—ã–≤—ã\n\n"
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating = sum(r['rating'] for r in reviews) / len(reviews)
    text += f"‚≠ê *–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:* {avg_rating:.1f} ({len(reviews)} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
    
    # –í—ã–≤–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ—Ç–∑—ã–≤–æ–≤ (–∏–ª–∏ –º–µ–Ω—å—à–µ, –µ—Å–ª–∏ –∏—Ö –≤—Å–µ–≥–æ –º–µ–Ω—å—à–µ 5)
    for i, review in enumerate(reviews[:5], 1):
        text += f"*–û—Ç–∑—ã–≤ #{i}*\n"
        text += f"‚≠ê –û—Ü–µ–Ω–∫–∞: {'‚≠ê' * review['rating']}\n"
        if review['comment']:
            text += f"üí¨ {review['comment']}\n"
        text += "\n"
    
    if len(reviews) > 5:
        text += f"*...–∏ –µ—â–µ {len(reviews) - 5} –æ—Ç–∑—ã–≤–æ–≤*\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

@router.callback_query(F.data.startswith("all_lunches:"))
async def callback_all_lunches(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏ –Ω–∞ –≤—Å–µ –¥–Ω–∏'"""
    place_id = int(callback.data.split(":")[1])
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ–¥–µ–Ω–∏–∏
    place = await db.get_place_by_id(place_id)
    if not place:
        await callback.answer("–ó–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏ –¥–ª—è –∑–∞–≤–µ–¥–µ–Ω–∏—è
    lunches = await db.get_business_lunches_for_all_days(place_id)
    
    if not lunches:
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
        return
    
    text = f"*{place['name']}* - –ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∏\n\n"
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ª–∞–Ω—á–∏: —Å–Ω–∞—á–∞–ª–∞ "–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", –ø–æ—Ç–æ–º –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    lunches.sort(key=lambda x: x['weekday'])
    
    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á–∞—Ö –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    for lunch in lunches:
        text += f"*{lunch['weekday_name']}*\n"
        text += f"üí∞ –¶–µ–Ω–∞: {lunch['price']} —Ä—É–±.\n"
        text += f"‚è∞ –í—Ä–µ–º—è: {lunch['start_time']} - {lunch['end_time']}\n"
        
        if lunch['description']:
            text += f"üìù {lunch['description']}\n"
        
        text += "\n"
    
    await callback.message.edit_text(
        text,
        reply_markup=get_back_to_place_keyboard(place_id),
        parse_mode="Markdown"
    )
    
    await callback.answer()

def _get_weekday_name(weekday: int) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –ø–æ –µ–≥–æ –Ω–æ–º–µ—Ä—É"""
    weekdays = {
        0: "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å",
        1: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        2: "–í—Ç–æ—Ä–Ω–∏–∫",
        3: "–°—Ä–µ–¥–∞", 
        4: "–ß–µ—Ç–≤–µ—Ä–≥",
        5: "–ü—è—Ç–Ω–∏—Ü–∞",
        6: "–°—É–±–±–æ—Ç–∞",
        7: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    return weekdays.get(weekday, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å") 